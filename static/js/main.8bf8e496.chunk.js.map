{"version":3,"sources":["firebase.ts","github.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ErrorFirestore","ref","this","collection","error","a","doc","id","set","add","docRef","callback","where","onSnapshot","snapshots","errors","forEach","snapshot","push","data","get","docs","map","trackedError","delete","provider","auth","GithubAuthProvider","addScope","getGithubUser","currentUser","getCachedUser","getRedirectResult","result","githubToken","credential","accessToken","user","displayName","email","photoUrl","photoURL","window","localStorage","setItem","JSON","stringify","undefined","loginWithGithub","signInWithRedirect","logoutWithGithub","removeItem","signOut","getItem","parse","GithubIssueClient","authToken","octokit","Octokit","repos","listForAuthenticatedUser","repo","name","owner","login","full_name","split","fullName","issues","create","title","body","newOccurrences","length","number","html_url","toString","url","createComment","issue_number","parseInt","issue","e","message","join","update","state","Header","Layout","Content","Footer","Option","Select","database","tailLayout","wrapperCol","offset","span","centered","display","alignItems","justifyContent","client","App","useState","errorStatus","setErrorStatus","datasource","setDatasource","setCurrentUser","setRepos","setProjectId","loading","setLoading","fillDatasources","totalOccurrences","occurrences","source","useEffect","then","onRead","getRepositories","onFinish","values","githubClient","Error","options","issueClient","trackErrors","timestamp","Date","getTime","catch","columns","dataIndex","key","render","href","text","record","type","onClick","closeIssue","className","theme","mode","selectable","style","float","Item","icon","src","GithubOutlined","textAlign","padding","labelCol","initialValues","remember","onFinishFailed","errorInfo","console","log","label","rules","required","showSearch","width","placeholder","onChange","value","validateStatus","help","htmlType","dataSource","active","flexDirection","fontWeight","fontSize","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bf8e496.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport {\n  ErrorDatabase,\n  SavedTrackedErrors,\n  TrackedErrors,\n} from \"error-issue-tracker-sdk\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_APIKEY,\n  authDomain: 'fir-error-issue-tracker.firebaseapp.com',\n  projectId: 'fir-error-issue-tracker',\n  storageBucket: 'fir-error-issue-tracker.appspot.com',\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGINGSENDERID,\n  appId: process.env.REACT_APP_FIREBASE_APPID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENTID,\n};\nfirebase.initializeApp(config);\n\nconst firestore = firebase.firestore();\n\nexport class ErrorFirestore implements ErrorDatabase {\n  private readonly ref: firebase.firestore.CollectionReference;\n  constructor() {\n    this.ref = firestore.collection(\"trackedErrors\");\n  }\n  async save(error: TrackedErrors): Promise<SavedTrackedErrors> {\n    if (\"id\" in error) {\n      await this.ref.doc(error.id).set(error);\n      return error as SavedTrackedErrors;\n    }\n    const docRef = await this.ref.add(error);\n    return {\n      ...error,\n      id: docRef.id,\n    };\n  }\n  onRead(\n    projectId: string,\n    callback: (trackedErrors: SavedTrackedErrors[]) => void\n  ) {\n    return this.ref\n      .where(\"projectId\", \"==\", projectId)\n      .onSnapshot((snapshots) => {\n        const errors = [] as SavedTrackedErrors[];\n        snapshots.forEach((snapshot) => {\n          errors.push({\n            ...(snapshot.data() as SavedTrackedErrors),\n            id: snapshot.id,\n          });\n        });\n        callback(errors);\n      });\n  }\n  async fetch(projectId: string): Promise<SavedTrackedErrors[]> {\n    const snapshots = (\n      await (await this.ref.where(\"projectId\", \"==\", projectId)).get()\n    ).docs;\n    return snapshots.map((snapshot) => {\n      const data = snapshot.data() as SavedTrackedErrors;\n      return { ...data, id: snapshot.id };\n    });\n  }\n\n  async delete(trackedError: SavedTrackedErrors): Promise<void> {\n    await this.ref.doc(trackedError.id).delete();\n  }\n}\n\nconst provider = new firebase.auth.GithubAuthProvider();\nprovider.addScope(\"repo\");\n\nexport type User = { displayName: string, photoUrl: string, githubToken: string };\nexport const getGithubUser = async () => {\n  try {\n    const currentUser = getCachedUser();\n    if (currentUser) return currentUser\n    const result = await firebase.auth().getRedirectResult();\n    const githubToken = (result?.credential as any)?.accessToken;\n    if (result.user && githubToken) {\n      const user = { displayName: result.user.displayName || result.user.email, githubToken, photoUrl: result.user.photoURL } as User\n      window.localStorage.setItem('currentUser', JSON.stringify(user))\n      return user;\n    }\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const loginWithGithub = async () => {\n  await firebase.auth().signInWithRedirect(provider);\n};\n\nexport const logoutWithGithub = async () => {\n  window.localStorage.removeItem(\"currentUser\")\n  await firebase.auth().signOut();\n};\n\nconst getCachedUser = (): User | undefined => {\n  const currentUser = window.localStorage.getItem(\"currentUser\")\n  return currentUser ? JSON.parse(currentUser) as User : undefined\n};\n","import { Octokit } from \"@octokit/rest\";\nimport {\n  FederatedErrors,\n  Issue,\n  IssueClient,\n  SavedTrackedErrors,\n} from \"error-issue-tracker-sdk\";\n\nexport type Repository = {\n  name: string;\n  owner: string;\n  fullName: string\n};\n\nexport default class GithubIssueClient implements IssueClient {\n  private readonly octokit: Octokit;\n  constructor(authToken: string) {\n    this.octokit = new Octokit({\n      auth: authToken,\n    });\n  }\n\n  async getRepositories(): Promise<Repository[]> {\n    const { data } = await this.octokit.repos.listForAuthenticatedUser();\n    return data.map((repo) => ({\n      name: repo.name,\n      owner: repo.owner?.login || repo.full_name.split(\"/\")[0],\n      fullName: repo.full_name\n    }));\n  }\n  async createIssue(error: FederatedErrors): Promise<Issue> {\n    const [owner, repo] = error.projectId.split(\"/\");\n    const {\n      data: { number, html_url },\n    } = await this.octokit.issues.create({\n      owner,\n      repo,\n      title: error.name,\n      body: `Found ${error.newOccurrences.length} occurences for the error ${error.name}`,\n    });\n    return { id: number.toString(), url: html_url };\n  }\n  async updateIssue(error: SavedTrackedErrors): Promise<Issue> {\n    const [owner, repo] = error.projectId.split(\"/\");\n    await this.octokit.issues.createComment({\n      owner,\n      repo,\n      issue_number: parseInt(error.issue.id),\n      body: `Hey, I found ${\n        error.newOccurrences.length\n      } occurrence(s) : \\n- ${error.newOccurrences\n        .map((e) => e.message)\n        .join(\"\\n - \")}`,\n    });\n    return error.issue;\n  }\n\n  async closeIssue(error: SavedTrackedErrors): Promise<void> {\n    const [owner, repo] = error.projectId.split(\"/\");\n    await this.octokit.issues.update({\n      owner,\n      repo,\n      issue_number: parseInt(error.issue.id),\n      state: \"closed\",\n    });\n  }\n}\n","import {\n  Button,\n  Form,\n  Input,\n  Table,\n  Layout,\n  Menu,\n  Select,\n  Avatar,\n  Image,\n  Skeleton,\n} from \"antd\";\nimport { GithubOutlined } from \"@ant-design/icons\";\nimport {\n  Issue,\n  SavedTrackedErrors,\n  TrackErrorOptions,\n  trackErrors,\n} from \"error-issue-tracker-sdk\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  ErrorFirestore,\n  getGithubUser,\n  loginWithGithub,\n  logoutWithGithub,\n  User,\n} from \"./firebase\";\nimport GithubIssueClient, { Repository } from \"./github\";\n\nconst { Header, Content, Footer } = Layout;\n\nconst { Option } = Select;\nconst database = new ErrorFirestore();\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst centered = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\ntype Record = {\n  id: string;\n  name: string;\n  issue: Issue;\n  newOccurrences: number;\n  totalOccurrences: number;\n  source: SavedTrackedErrors;\n};\n\nconst client = (currentUser?: User) =>\n  currentUser && new GithubIssueClient(currentUser.githubToken);\nfunction App() {\n  const [errorStatus, setErrorStatus] = useState<string | undefined>();\n  const [datasource, setDatasource] = useState<Record[]>([]);\n  const [currentUser, setCurrentUser] = useState<User | undefined>();\n  const [repos, setRepos] = useState<Repository[]>();\n  const [projectId, setProjectId] = useState<string | undefined>();\n  const [loading, setLoading] = useState(false);\n  const fillDatasources = (errors: SavedTrackedErrors[]) =>\n    setDatasource(\n      errors.map((e) => ({\n        id: e.id,\n        name: e.name,\n        issue: e.issue,\n        newOccurrences: e.newOccurrences.length,\n        totalOccurrences: e.occurrences.length + e.newOccurrences.length,\n        source: e,\n      }))\n    );\n  useEffect(() => {\n    if (!currentUser) {\n      setLoading(true);\n      getGithubUser().then((user) => {\n        setCurrentUser(user);\n        setLoading(false);\n      });\n    }\n    const unsubscribe = projectId\n      ? database.onRead(projectId, fillDatasources)\n      : () => {};\n    return unsubscribe;\n  }, [currentUser, projectId]);\n  useEffect(() => {\n    !repos && client(currentUser)?.getRepositories().then(setRepos);\n  }, [currentUser, repos]);\n\n  const onFinish = async (values: any) => {\n    const githubClient = client(currentUser);\n    if (!githubClient || !projectId)\n      throw new Error(\"Need to be login to use this feature\");\n    const options: TrackErrorOptions = {\n      database,\n      issueClient: githubClient,\n      projectId,\n    };\n    trackErrors(\n      [\n        {\n          message: values[\"error-message\"],\n          timestamp: new Date().getTime(),\n        },\n      ],\n      options\n    ).catch((e) => setErrorStatus(e.message));\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Github issue\",\n      dataIndex: \"issue\",\n      key: \"issue\",\n      render: ({ id, url }: Issue) => <a href={url}>{id}</a>,\n    },\n    {\n      title: \"New occurrences\",\n      dataIndex: \"newOccurrences\",\n      key: \"newOccurrences\",\n    },\n\n    {\n      title: \"Total occurences\",\n      dataIndex: \"totalOccurrences\",\n      key: \"totalOccurrences\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (text: string, record: Record) => (\n        <Button\n          type=\"link\"\n          onClick={() =>\n            database\n              .delete(record.source)\n              .then(() => client(currentUser)?.closeIssue(record.source))\n          }\n        >\n          Close and delete\n        </Button>\n      ),\n    },\n  ];\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\">Demo Error Issue Tracker</div>\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          selectable={false}\n          style={{ float: \"right\" }}\n        >\n          {currentUser ? (\n            <Menu.Item\n              key=\"logout\"\n              icon={<Avatar src={<Image src={currentUser.photoUrl} />} />}\n              onClick={() =>\n                logoutWithGithub().then(() => setCurrentUser(undefined))\n              }\n            >\n              Log out\n            </Menu.Item>\n          ) : (\n            <Menu.Item\n              key=\"login\"\n              icon={<GithubOutlined />}\n              onClick={loginWithGithub}\n            >\n              Log in with Github\n            </Menu.Item>\n          )}\n        </Menu>\n      </Header>\n      <Content className=\"site-layout-content\">\n        <div>\n          <h1 style={{ textAlign: \"center\" }}>\n            Welcome to the demo of the{\" \"}\n            <a href=\"https://github.com/ludorival/error-issue-tracker\">\n              error-issue-tracker-sdk !\n            </a>\n          </h1>\n          <div style={centered}>\n            <div>\n              <p>\n                {\" \"}\n                This demo shows you an usage of the{\" \"}\n                <a href=\"https://github.com/ludorival/error-issue-tracker\">\n                  error-issue-tracker-sdk !\n                </a>\n                <p>\n                  It is based on{\" \"}\n                  <ul>\n                    <li>\n                      <b>\n                        <a href=\"https://octokit.github.io/rest.js/v18/\">\n                          Github SDK\n                        </a>\n                      </b>{\" \"}\n                      to track the issues\n                    </li>\n                    <li>\n                      <b>\n                        <a href=\"https://firebase.google.com/docs/reference/js\">\n                          Firebase\n                        </a>\n                      </b>{\" \"}\n                      to store the mapping between the errors and the relative\n                      issues.\n                    </li>\n                  </ul>\n                </p>\n              </p>\n              <p>\n                This demo uses your Github account to list your repository{\" \"}\n                <i>(None of your personnal data will be stored)</i>.\n                <ul>\n                  <li>\n                    Select a repository where the errors should be tracked\n                  </li>\n                  <li>\n                    Write and push a message to simulate an error to track\n                  </li>\n                  <li>\n                    Try by putting the same error and you will see that the same\n                    issue will be recycled\n                  </li>\n                </ul>\n              </p>\n            </div>\n          </div>\n        </div>\n        <hr />\n        {!currentUser ? (\n          loading ? (\n            <Skeleton active />\n          ) : (\n            <div style={{ ...centered, flexDirection: \"column\" }}>\n              <div style={{ fontWeight: 800, padding: 24, fontSize: \"2em\" }}>\n                Let's get started ! 👇\n              </div>\n              <Button\n                type=\"primary\"\n                size={\"large\"}\n                icon={<GithubOutlined />}\n                onClick={loginWithGithub}\n              >\n                Log in with Github\n              </Button>\n            </div>\n          )\n        ) : (\n          <Fragment>\n            <Form\n              style={{ padding: 16 }}\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 8 }}\n              name=\"basic\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n            >\n              <Form.Item\n                name=\"repository\"\n                label=\"Github repository\"\n                rules={[{ required: true }]}\n              >\n                <Select\n                  showSearch\n                  style={{ width: 200 }}\n                  placeholder=\"Select a repository\"\n                  onChange={(value) => setProjectId(value.toString())}\n                >\n                  {repos?.map((repo) => (\n                    <Option key={repo.fullName} value={repo.fullName}>\n                      {repo.name}\n                    </Option>\n                  ))}\n                </Select>\n              </Form.Item>\n              <Form.Item\n                label=\"Enter an example of error\"\n                name=\"error-message\"\n                validateStatus={errorStatus ? \"error\" : undefined}\n                help={errorStatus}\n                rules={[{ required: true, message: \"Please input a message!\" }]}\n              >\n                <Input />\n              </Form.Item>\n\n              <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Push\n                </Button>\n              </Form.Item>\n            </Form>\n            <Table dataSource={datasource} columns={columns} />\n          </Fragment>\n        )}\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>\n        Ant Design ©2018 Created by Ant UED\n        <p>\n          <a href=\"https://www.termsfeed.com/live/269deb2a-4a39-4ce1-8bd2-3a4f1c3bbf54\">\n            Private Policy\n          </a>\n        </p>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'antd/dist/antd.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}